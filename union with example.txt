#include <stdio.h>

// Define a union
union Data {
    int intValue;
    float floatValue;
    char charValue;
};

int main() {
    // Create a union variable
    union Data data;

    // Assign an integer value
    data.intValue = 10;
    printf("Integer: %d\n", data.intValue);

    // Assign a float value
    data.floatValue = 3.14;
    printf("Float: %.2f\n", data.floatValue);

    // Assign a character value
    data.charValue = 'A';
    printf("Character: %c\n", data.charValue);

    // Display the current values in the union
    printf("Current Integer Value: %d\n", data.intValue);
    printf("Current Float Value: %.2f\n", data.floatValue);
    printf("Current Character Value: %c\n", data.charValue);

    return 0;
}


Explanation:
Union Definition:

A union named Data is defined with three members: int intValue, float floatValue, and char charValue. Each member shares the same memory location.
Assigning Values:

The union variable data is used to assign values to its members.
When a new value is assigned, the previous value gets overwritten because all members share the same memory location.
Output Values:

Each printf statement displays the current value stored in the union.
Since the union shares memory, only the last assigned value is correctly displayed, while previous assignments may produce unpredictable results.

Sample Output:
sql
Copy code
Integer: 10
Float: 3.14
Character: A
Current Integer Value: 65
Current Float Value: 0.00
Current Character Value: A
Key Points:

A union allows different data types to be stored in the same memory location.
Only one of the members can hold a value at a time.
The size of the union is determined by the size of its largest member.





